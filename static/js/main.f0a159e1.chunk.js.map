{"version":3,"sources":["components/Nav/index.js","components/Jumbotron/index.js","components/Form/index.js","components/Results/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Jumbotron","Form","type","placeholder","class","for","Results","App","state","books","components_Nav","components_Jumbotron","components_Form","components_Results","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f0a159e1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-2\">\r\n     <a className=\"navbar-brand\" href=\"/\">\r\n        Google Books\r\n      </a>\r\n      {/* Toggle hamburger */}\r\n      <button className=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbarNav\" \r\n      aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul className=\"navbar-nav\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" href=\"/\">Search</a>\r\n          </li>\r\n          <li className=\"nav-item\"><a className=\"nav-link\" href=\"/saved\">Saved</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n    <div className=\"col-md-12\">\r\n    <div className=\"jumbotron\">\r\n     <h1 className=\"text-center\">\r\n     <strong>(React) Google Books Search</strong>\r\n     </h1>\r\n     <h2 className=\"text-center\">Search for and Save Books of Interest.\r\n     </h2>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\n// This file exports the Input and FormBtn components\r\n\r\nfunction Form() {\r\n  return (\r\n    <div className=\"col-md-12\">\r\n    <div className=\"card mt-4\">\r\n    <div className=\"card-header\">\r\n              <h3>\r\n                 <strong>Book Search</strong>\r\n              </h3>\r\n            </div>\r\n     <form type=\"text\" placeholder=\"Large text\">\r\n     <div class=\"form-group\"><label for=\"Query\"></label><input class=\"form-control\" id=\"Title\" placeholder=\"ex: Harry Potter\" type=\"text\"/>\r\n     </div>\r\n     <button type=\"submit\" class=\"btn btn-lg btn-danger float-right\">Search</button>\r\n</form>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n\r\n","import React from \"react\";\r\n\r\nfunction Results() {\r\n  return (\r\n    <div className=\"col-md-12\">\r\n       <div className=\"card mt-4\">\r\n           <div className=\"card-header\">\r\n              <h3>\r\n                 <strong>Results</strong>\r\n              </h3>\r\n            </div>\r\n              <div class=\"card-body\">\r\n                <h2 class=\"text-center\">\r\n               Search For A Book To Begin!\r\n                </h2>\r\n              </div>\r\n            </div>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Results;","import React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport \"./App.css\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Form from \"./components/Form\";\nimport Results from \"./components/Results\";\n\nclass App extends Component {\n  state = {\n    books: []\n  }\n  render() {\n    return (\n      <div>\n        <Nav />\n        <Jumbotron/>\n        <Form/>\n        <Results />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}